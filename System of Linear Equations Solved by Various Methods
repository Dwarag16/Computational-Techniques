'''
AX = B

First line of input: r = number of rows of matrix A
Next r lines: Each row of A entered in consecutive lines, elements of each row seperated by space
Next r lines: Each row of B entered in consecutive lines. Multiple B columns can be used to solve many systems with same A simultaneously
'''

import copy
def det(a):
    if len(a)>1:
        s = 0
        for i in range(len(a[0])):
            k = a[0][i]
            b = [[] for __ in range(len(a)-1)]
            for x in range(1,len(a)):
                for y in range(len(a[0])):
                    if y!=i:
                        b[x-1].append(a[x][y])                    
            s+=((-1)**i)*k*det(b)
        return s
    return a[0][0]

def inv(a):
    d = det(a)
    if d==0:
        return -1
    if len(a)==1:
        b = list(a)
        for i in range(len(a)):
            for j in range(len(a[0])):
                b[i][j]**=-1
        return b
    s = [[0 for _ in range(len(a[0]))] for __ in range(len(a))]
    for i in range(len(a)):
        for j in range(len(a[0])):
            b = [[] for __ in range(len(a)-1)]
            f = 0
            for x in range(len(a)):
                for y in range(len(a[0])):
                    if x==i:
                        f=-1
                    if (y!=j)and(x!=i):
                        b[x+f].append(a[x][y])
    
            s[j][i] = ((-1)**(i+j))*det(b)/d
    return s

def mul(a,b):
    c = [[0 for _ in range(len(b[0]))] for __ in range(len(a))]
    for i in range(len(a)):
        for j in range(len(b[0])):
            s=0
            for x in range(len(b)):
                s+=a[i][x]*b[x][j]
            c[i][j]=s
    return c

def ad(a,b):
    c = copy.deepcopy(a)
    for i in range(len(a)):
        for j in range(len(a[0])):
            c[i][j] = a[i][j] + b[i][j]
    return c

def smul(a,b):
    for i in range(len(b)):
        for j in range(len(b[0])):
            b[i][j]*=a
    return b

def aprx(a):
    for i in range(len(a)):
        for j in range(len(a[0])):
            a[i][j] = eval("%.5f"%round(a[i][j],5))
    return a


def pru(a):
    for i in a:
        for j in i:
            if j<0:
                print("%.4f"%round(j,4), end = " ")
            else:
                print("%.5f"%round(j,5), end = " ")
        print()
    print(end)
def pr(a,b):
    for i in range(len(a)):
        for j in a[i]:
            if j<0:
                print("%.4f"%round(j,4), end = " ")
            else:
                print("%.5f"%round(j,5), end = " ")
        print("|",end = "  ")
        for k in b[i]:
            if k<0:
                print("%.4f"%round(k,4), end = " ")
            else:
                print("%.5f"%round(k,5), end = " ")
        print()
    print(end)
r = int(input())
c = r
a = []
for _ in range(r):
    b = [eval(i) for i in input().split()]
    a.append(b)
d = [[0 for _ in range(c)] for __ in range(r)]
lu = [[0 for _ in range(c)] for __ in range(r)]
l = [[0 for _ in range(c)] for __ in range(r)]
u = [[0 for _ in range(c)] for __ in range(r)]
dl = [[0 for _ in range(c)] for __ in range(r)]
du = [[0 for _ in range(c)] for __ in range(r)]
for i in range(r):
    for j in range(c):
        if i==j:
            d[i][j] = a[i][j]
            dl[i][j] = a[i][j]
            du[i][j] = a[i][j]
        else:
            lu[i][j] = a[i][j]
            if i<j:
                u[i][j] = a[i][j]
                du[i][j] = a[i][j]
            else:
                l[i][j] = a[i][j]
                dl[i][j] = a[i][j]

b = []
for _ in range(r):
    c = [eval(i) for i in input().split()]
    b.append(c)
end = "----------------------------------------"

print("Given System of Linear Equation")
pr(a,b)
print(end)

#Original Solution
print("Original Solution")
print()
pru(mul(inv(a),b))
print(end)
print()

#Gauss Elimination
print("Gauss Elimination")
print()
a1 = copy.deepcopy(a)
b1 = copy.deepcopy(b)

for i in range(r):
    for j in range(i+1,len(a1)):
        pr(a1,b1)
        ru = a1[j][i]/a1[i][i]
        for k in range(i,len(a1[0])):
            a1[j][k]-=(a1[i][k]*ru)
        for jj in range(len(b1[0])):
            b1[j][jj]-=b1[i][jj]*ru
pr(a1,b1)
print(end)
print()

#Gauss Jordan
print("Gauss Jordan")
print()
a1 = copy.deepcopy(a)
b1 = copy.deepcopy(b)

for i in range(r):
    for j in range(len(a1)):
        if j!=i:
            pr(a1,b1)
            ru = a1[j][i]/a1[i][i]
            for k in range(i,len(a1[0])):
                a1[j][k]-=(a1[i][k]*ru)
            for jj in range(len(b1[0])):
                b1[j][jj]-=(b1[i][jj]*ru)
pr(a1,b1)
print(end)
print()

#LU Decomposition by Doo'Little Method
print("Doo'Little")
print()
L = copy.deepcopy(a)
U = copy.deepcopy(a)
L = smul(0,L)
for _ in range(len(L)):
    L[_][_] = 1

for i in range(r):
    for j in range(i+1,len(U)):
        ru = U[j][i]/U[i][i]
        for k in range(i,len(U[0])):
            U[j][k]-=(U[i][k]*ru)
        for jj in range(len(L[0])):
            L[j][jj]-=L[i][jj]*ru

L = inv(L)
print("L,U")
pr(L,U)
#pru(mul(L,U))
print("Y =")
pru(mul(inv(L),b))
print()
print("X =")
pru(mul(inv(a),b))
print(end)
print()

#LU Decomposition by Crout's Method
print("Crout's")
print()
L = copy.deepcopy(a)
U = copy.deepcopy(a)
L = smul(0,L)
for _ in range(len(L)):
    L[_][_] = 1

for i in range(r):
    for j in range(i+1,len(U)):
        ru = U[j][i]/U[i][i]
        for k in range(i,len(U[0])):
            U[j][k]-=(U[i][k]*ru)
        for jj in range(len(L[0])):
            L[j][jj]-=L[i][jj]*ru

for i in range(r):
    ru = U[i][i]
    for j in range(r):
        U[i][j]/=ru
        L[i][j]/=ru

L = inv(L)
print("L,U")
pr(L,U)
#pru(mul(L,U))
print("Y =")
pru(mul(inv(L),b))
print()
print("X =")
pru(mul(inv(a),b))
print(end)
print()

'''
Gauss Jacobi Iterative Method 

This method wont always work if matrix A is not diagonally dominant 
The iteration often diverges for non-diagonally dominant matrices
'''
print("Gauss Jacobi")
print()
h = mul(inv(d),lu)
h = smul(-1,h)
print("H")
pru(h)
c = mul(inv(d),b)
print("c")
pru(c)
x = copy.deepcopy(b)
x = smul(0,x)
print("-------------")
print("Iteration -",0)
print("-------------")
pru(x)
it = 1
for _ in range(50):
    soo = ad(mul(h,x),c)
    soo = aprx(soo)
    print("-------------")
    print("Iteration -",it)
    print("-------------")
    print(f"X_{it} =")
    pru(soo)
    if soo==x:
        break
    x = copy.deepcopy(soo)
    it+=1
print(end)
print()


'''
Gauss Seidal Iterative Method 

This method wont always work if matrix A is not diagonally dominant 
The iteration often diverges for non-diagonally dominant matrices
'''
print("Gauss Seidal")
print()
h = mul(inv(dl),u)
h = smul(-1,h)
print("H")
pru(h)
c = mul(inv(dl),b)
print("c")
pru(c)
print("(D+L)^-1")
pru(inv(dl))
x = copy.deepcopy(b)
x = smul(0,x)
print("-------------")
print("Iteration -",0)
print("-------------")
pru(x)
it = 1
for _ in range(50):
    soo = ad(mul(h,x),c)
    soo = aprx(soo)
    print("-------------")
    print("Iteration -",it)
    print("-------------")
    print(f"X_{it} =")
    pru(soo)
    if soo==x:
        break
    x = copy.deepcopy(soo)
    it+=1
print(end)
print()
